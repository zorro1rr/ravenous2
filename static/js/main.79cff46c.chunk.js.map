{"version":3,"sources":["components/SearchBar/SearchBar.js","components/Business/Business.js","components/BusinessList/BusinessList.js","util/Yelp.js","App.js","serviceWorker.js","index.js"],"names":["sortByOptions","SearchBar","props","state","term","location","sortBy","handleTermChange","bind","handleLocationChange","handleSearch","event","this","setState","target","value","searchYelp","preventDefault","sortByOption","Object","keys","map","sortByOptionValue","key","onClick","handleSortByChange","className","getSortByClass","renderSortByOptions","onChange","placeholder","href","React","Component","Business","business","class","src","imageSrc","alt","name","address","city","zipCode","category","rating","reviewCount","BusinessList","businesses","id","Yelp","fetch","headers","Authorization","then","response","json","jsonResponse","console","log","image_url","address1","zip_code","categories","title","review_count","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.79cff46c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nconst sortByOptions = {\r\n    'Best Match': 'best_match',\r\n    'Highest Rated': 'rating',\r\n    'Most Reviewed': 'review_count'\r\n};\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        //create state object with the keys:\r\n        //terms, location, sortBy for the search option inputs\r\n        this.state= {\r\n        term: '' ,\r\n        location: '',\r\n        sortBy: 'best_match',\r\n        };\r\n        //since they use .this the these two methods need to be bind(ed)\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n        this.handleLocationChange = this.handleLocationChange.bind(this);\r\n        //this uses props so it must also be bound\r\n        this.handleSearch = this.handleSearch.bind(this);\r\n    }\r\n\r\n        //methods to deal with input elements Terms and Location\r\n     handleTermChange(event){\r\n        this.setState({\r\n            term: event.target.value\r\n         });\r\n     }\r\n    handleLocationChange(event){\r\n         this.setState({\r\n            location:  event.target.value\r\n         });\r\n      }\r\n      //give the let's go button functionality\r\n    handleSearch(event){\r\n        this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\r\n        event.preventDefault();\r\n    }\r\n        \r\n    getSortByClass(sortByOption){\r\n        if(sortByOption === this.state.sortBy){\r\n            return 'active'\r\n        } else {\r\n            return ''\r\n        }\r\n    };\r\n\r\n    handleSortByChange(sortByOption){\r\n        this.setState({\r\n            sortBy: sortByOption\r\n        });\r\n    }\r\n\r\n\r\n    renderSortByOptions() {\r\n        return Object.keys(sortByOptions).map(sortByOption => {\r\n            let sortByOptionValue = sortByOptions[sortByOption];\r\n        return <li key={sortByOptionValue} onClick={this.handleSortByChange.bind(this, sortByOptionValue)} className={this.getSortByClass(sortByOptionValue)}>{sortByOption}</li>\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n    <div className=\"SearchBar\">\r\n        <div className=\"SearchBar-sort-options\">\r\n            <ul>\r\n              {this.renderSortByOptions()}\r\n             </ul>\r\n        </div>\r\n    <div className=\"SearchBar-fields\">\r\n      <input term=\"Search Businesses\" onChange={this.handleTermChange}/>\r\n      <input placeholder=\"Where?\" onChange={this.handleLocationChange}/>\r\n    </div>\r\n    <div className=\"SearchBar-submit\">\r\n      <a href='http://wwww.#.com' onClick={this.handleSearch}>Let's Go</a>\r\n    </div>\r\n    </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport './Business.css';\r\n\r\n\r\nclass Business extends React.Component {\r\nrender (){\r\n    const {business} = this.props;\r\n    return (<div class=\"Business\">\r\n    <div className=\"image-container\">\r\n      <img src={business.imageSrc} alt='business img'/>\r\n    </div>\r\n    <h2>{business.name}</h2>\r\n    <div className=\"Business-information\">\r\n      <div className=\"Business-address\">\r\n        <p><a target=\"_blank\" href='`https://www.google.com/maps/place/${business.address},${business.city},+${business.state}+${business.zipCode}/`'>{business.address}</a></p>\r\n        <p>{business.city}</p>\r\n        <p>{business.state},{business.zipCode}</p>\r\n      </div>\r\n      <div className=\"Business-reviews\">\r\n        <h3>{business.category}</h3>\r\n        <h3 className=\"rating\">{business.rating}, stars</h3>\r\n        <p>{business.reviewCount} reviews</p>\r\n      </div>\r\n    </div>\r\n  </div>)\r\n    }\r\n};\r\n\r\nexport default Business;","import React from 'react'\r\nimport './BusinessList.css'\r\nimport Business from '../Business/Business';\r\n\r\nclass BusinessList extends React.Component {\r\n    render () {\r\n    return (\r\n    <div className=\"BusinessList\">\r\n      {\r\n      this.props.businesses.map( (business) => {\r\n        return <Business business={business} key={business.id}/>;\r\n      })\r\n      }\r\n  </div>\r\n      )\r\n    }\r\n};\r\n\r\nexport default BusinessList;","//store yelp api key\r\nconst apiKey = 'pSupkM4EbuChkBT6bCX812gsIACmnTbMQBUuwvs-FNdQSuaFkcVpxbX9YLA3pHIdZqS5S6drqYtJd5TUTT5hw6_HUA1NWDCQqFkoQeeQ7rMhzkIMB7f4To1ZXFB1XnYx';\r\n\r\nconst Yelp = {\r\nsearchYelp (term, location, sortBy){\r\n    //Prepend the URL path with CORS Anywhere API to bypass CORS restrictions\r\n    //use string interpolation so parameters can be plugged into url\r\n    return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, {\r\n        headers: {\r\n        Authorization: `Bearer ${apiKey}`,\r\n        },\r\n    //convert the returned response to JSON\r\n    }).then(response => {\r\n        return response.json();\r\n    //check to see if jsonResponse has a businesses key\r\n    }).then((jsonResponse) => {\r\n        if(jsonResponse.businesses) {\r\n            //loop through the json response\r\n            return jsonResponse.businesses.map((business) => {\r\n            //make and object with all the business attributes to display\r\n            console.log(business);\r\n             return {\r\n                id: business.id,\r\n                imageSrc: business.image_url,\r\n                name: business.name,\r\n                address: business.location.address1,\r\n                city: business.location.city,\r\n                state: business.location.state,\r\n                zipCode: business.location.zip_code,\r\n                category: business.categories[0].title,\r\n                rating: business.rating,\r\n                reviewCount: business.review_count,\r\n                    }\r\n                });\r\n            }\r\n        })\r\n    }\r\n};\r\n\r\nexport default Yelp;","import React from 'react';\nimport './App.css';\nimport SearchBar from './components/SearchBar/SearchBar';\nimport BusinessList from './components/BusinessList/BusinessList'\nimport Yelp from './util/Yelp';\n\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    //set the initial state\n    this.state = {\n      businesses: [],\n    };\n    this.searchYelp = this.searchYelp.bind(this);\n  }\nsearchYelp(term, location, sortBy){\nYelp.searchYelp(term, location, sortBy).then((businesses) => {\n  this.setState({\n    businesses: businesses\n  });\n});\n}\n\n  render () {\n    return (\n      <div className=\"App\">\n  <h1>ravenous</h1>\n  <SearchBar searchYelp={this.searchYelp}/>\n  <BusinessList businesses={this.state.businesses} />\n</div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}